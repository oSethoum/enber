// Code generated by enber, DO NOT EDIT.
{{- range .QueryNodes}}
export interface {{pascal .Name}} {
	{{- range .Fields}}
	{{camel .Name}}: {{.TsType}}; 
	{{- end}}
	edges?: {{.Name}}Edges;
}

export interface {{.Name}}Edges {
	{{- range .Edges}}
	{{camel .Name}}?: {{pascal .Node}};
	{{- end}}
}
{{end}}
export type Direction = "ASC" | "DESC";
{{range .InputNodes}}
export interface {{pascal .Name}}CreateInput {
{{- range .CreateFields}}
	{{camel .Name}}{{- if .TsCheck -}}?{{- end -}}: {{.TsType}};
{{- end}}
{{- range .CreateEdges}}
	{{camel .Name}}{{- if .TsCheck -}}?{{- end -}}: {{.TsType}};
{{- end}}
}

export interface {{pascal .Name}}UpdateInput {
{{- range .UpdateFields}}
	{{camel .Name}}{{- if .TsCheck -}}?{{- end -}}: {{.TsType}};
{{- end}}
{{- range .UpdateEdges}}
	{{camel .Name}}{{- if .TsCheck -}}?{{- end -}}: {{.TsType}};
{{- end}}
}
{{- end}}
{{range .QueryNodes}}
export type {{pascal .Name}}SelectField = {{enberselect .}};
export type {{pascal .Name}}OrderField = {{enberorder .}};
export interface {{pascal .Name}}Order {
	field: {{pascal .Name}}OrderField;
	direction?: Direction;
}

export interface {{pascal .Name}}QueryInput {
  select?: {{pascal .Name}}SelectField[]
	offset?: number;
	limit?: number;
	where?: {{pascal .Name}}WhereInput;
	order?: {{pascal .Name}}Order[];
	{{- range .Edges}}
	with{{pascal .Name}}?: {{pascal .Node}}QueryInput;
	{{- end}}
}

export interface {{pascal .Name}}WhereInput {
  and?: {{pascal .Name}}WhereInput[];
  or?: {{pascal .Name}}WhereInput[];
  not?: {{pascal .Name}}WhereInput;
  {{- range .Fields}}
  {{- if .Boolean}}
	{{camel .Name}}EQ?: {{.TsType}};
	{{camel .Name}}NEQ?: {{.TsType}};
	{{- end}}
	{{- if .Comparable}}
	{{camel .Name}}?: {{.TsType}};
	{{camel .Name}}NEQ?: {{.TsType}};
	{{camel .Name}}In?: {{.TsType}}[];
	{{camel .Name}}NotIn?: {{.TsType}}[];
	{{- if not .EdgeFieldOrEnum}}
	{{camel .Name}}GT?: {{.TsType}};
	{{camel .Name}}GTE?: {{.TsType}};
	{{camel .Name}}LT?: {{.TsType}};
	{{camel .Name}}LTE?: {{.TsType}};
	{{- end -}}
	{{- end}}
	{{- if .Optional}}
	{{camel .Name}}IsNil?: boolean;
	{{camel .Name}}NotNil?: boolean;
	{{- end}}
	{{- if eq .Name "ID" | not}}
		{{- if .String}}
		{{camel .Name}}Contains?: string;
		{{camel .Name}}HasPrefix?: string;
		{{camel .Name}}HasSuffix?: string;
		{{camel .Name}}ContainsFold?: string;
		{{camel .Name}}EqualFold?: string;
		{{- end}}
	{{- end}}
  {{- end}}
  {{- range .Edges}}
  has{{pascal .Name}}?: boolean;
	has{{pascal .Name}}With?: {{.Node}}WhereInput;
  {{- end}}
}
{{end}}